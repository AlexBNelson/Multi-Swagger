function cov_f29mtn6as(){var path="C:\\Users\\User\\source\\repos\\multi-swagger\\Multi-Swagger\\src\\helpers\\get-parameter-schema.js";var hash="3fc7711f402d6e51260f3c7ddca767356e5ec58f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\User\\source\\repos\\multi-swagger\\Multi-Swagger\\src\\helpers\\get-parameter-schema.js",statementMap:{"0":{start:{line:7,column:27},end:{line:24,column:1}},"1":{start:{line:48,column:2},end:{line:53,column:3}},"2":{start:{line:49,column:4},end:{line:52,column:5}},"3":{start:{line:55,column:2},end:{line:68,column:3}},"4":{start:{line:57,column:4},end:{line:67,column:5}},"5":{start:{line:58,column:6},end:{line:61,column:7}},"6":{start:{line:63,column:6},end:{line:66,column:7}},"7":{start:{line:64,column:43},end:{line:64,column:73}},"8":{start:{line:72,column:2},end:{line:86,column:3}},"9":{start:{line:73,column:39},end:{line:75,column:15}},"10":{start:{line:77,column:38},end:{line:77,column:72}},"11":{start:{line:79,column:4},end:{line:85,column:5}},"12":{start:{line:88,column:2},end:{line:91,column:3}}},fnMap:{"0":{name:"getParameterSchema",decl:{start:{line:46,column:24},end:{line:46,column:42}},loc:{start:{line:46,column:71},end:{line:92,column:1}},line:46},"1":{name:"(anonymous_1)",decl:{start:{line:64,column:33},end:{line:64,column:34}},loc:{start:{line:64,column:43},end:{line:64,column:73}},line:64}},branchMap:{"0":{loc:{start:{line:46,column:54},end:{line:46,column:69}},type:"default-arg",locations:[{start:{line:46,column:67},end:{line:46,column:69}}],line:46},"1":{loc:{start:{line:48,column:2},end:{line:53,column:3}},type:"if",locations:[{start:{line:48,column:2},end:{line:53,column:3}},{start:{line:48,column:2},end:{line:53,column:3}}],line:48},"2":{loc:{start:{line:55,column:2},end:{line:68,column:3}},type:"if",locations:[{start:{line:55,column:2},end:{line:68,column:3}},{start:{line:55,column:2},end:{line:68,column:3}}],line:55},"3":{loc:{start:{line:57,column:4},end:{line:67,column:5}},type:"if",locations:[{start:{line:57,column:4},end:{line:67,column:5}},{start:{line:57,column:4},end:{line:67,column:5}}],line:57},"4":{loc:{start:{line:72,column:2},end:{line:86,column:3}},type:"if",locations:[{start:{line:72,column:2},end:{line:86,column:3}},{start:{line:72,column:2},end:{line:86,column:3}}],line:72},"5":{loc:{start:{line:89,column:12},end:{line:89,column:81}},type:"cond-expr",locations:[{start:{line:89,column:38},end:{line:89,column:71}},{start:{line:89,column:73},end:{line:89,column:81}}],line:89}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3fc7711f402d6e51260f3c7ddca767356e5ec58f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_f29mtn6as=function(){return actualCoverage;};}return actualCoverage;}cov_f29mtn6as();/**
 * @prettier
 */import Im from"immutable";const swagger2SchemaKeys=(cov_f29mtn6as().s[0]++,Im.Set.of("type","format","items","default","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","pattern","maxItems","minItems","uniqueItems","enum","multipleOf"));/**
 * @typedef {Object} ParameterSchemaDescriptor
 * @property {Immutable.Map} schema - the parameter schema
 * @property {string|null} parameterContentMediaType - the effective media type, for `content`-based OpenAPI 3.0 Parameters, or `null` otherwise
 */ /**
 * Get the effective schema value for a parameter, or an empty Immutable.Map if
 * no suitable schema can be found.
 *
 * Supports OpenAPI 3.0 `Parameter.content` priority -- since a Parameter Object
 * cannot have both `schema` and `content`, this function ignores `schema` when
 * `content` is present.
 *
 * @param {Immutable.Map} parameter The parameter to identify a schema for
 * @param {object} config
 * @param {boolean} config.isOAS3 Whether the parameter is from an OpenAPI 2.0
 * or OpenAPI 3.0 definition
 * @return {ParameterSchemaDescriptor} Information about the parameter schema
 */export default function getParameterSchema(parameter,{isOAS3}=(cov_f29mtn6as().b[0][0]++,{})){cov_f29mtn6as().f[0]++;cov_f29mtn6as().s[1]++;// Return empty Map if `parameter` isn't a Map
if(!Im.Map.isMap(parameter)){cov_f29mtn6as().b[1][0]++;cov_f29mtn6as().s[2]++;return{schema:Im.Map(),parameterContentMediaType:null};}else{cov_f29mtn6as().b[1][1]++;}cov_f29mtn6as().s[3]++;if(!isOAS3){cov_f29mtn6as().b[2][0]++;cov_f29mtn6as().s[4]++;// Swagger 2.0
if(parameter.get("in")==="body"){cov_f29mtn6as().b[3][0]++;cov_f29mtn6as().s[5]++;return{schema:parameter.get("schema",Im.Map()),parameterContentMediaType:null};}else{cov_f29mtn6as().b[3][1]++;cov_f29mtn6as().s[6]++;return{schema:parameter.filter((v,k)=>{cov_f29mtn6as().f[1]++;cov_f29mtn6as().s[7]++;return swagger2SchemaKeys.includes(k);}),parameterContentMediaType:null};}}else{cov_f29mtn6as().b[2][1]++;}// If we've reached here, the parameter is OpenAPI 3.0
cov_f29mtn6as().s[8]++;if(parameter.get("content")){cov_f29mtn6as().b[4][0]++;const parameterContentMediaTypes=(cov_f29mtn6as().s[9]++,parameter.get("content",Im.Map({})).keySeq());const parameterContentMediaType=(cov_f29mtn6as().s[10]++,parameterContentMediaTypes.first());cov_f29mtn6as().s[11]++;return{schema:parameter.getIn(["content",parameterContentMediaType,"schema"],Im.Map()),parameterContentMediaType};}else{cov_f29mtn6as().b[4][1]++;}cov_f29mtn6as().s[12]++;return{schema:parameter.get("schema")?(cov_f29mtn6as().b[5][0]++,parameter.get("schema",Im.Map())):(cov_f29mtn6as().b[5][1]++,Im.Map()),parameterContentMediaType:null};}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZjI5bXRuNmFzIiwiYWN0dWFsQ292ZXJhZ2UiLCJJbSIsInN3YWdnZXIyU2NoZW1hS2V5cyIsInMiLCJTZXQiLCJvZiIsImdldFBhcmFtZXRlclNjaGVtYSIsInBhcmFtZXRlciIsImlzT0FTMyIsImIiLCJmIiwiTWFwIiwiaXNNYXAiLCJzY2hlbWEiLCJwYXJhbWV0ZXJDb250ZW50TWVkaWFUeXBlIiwiZ2V0IiwiZmlsdGVyIiwidiIsImsiLCJpbmNsdWRlcyIsInBhcmFtZXRlckNvbnRlbnRNZWRpYVR5cGVzIiwia2V5U2VxIiwiZmlyc3QiLCJnZXRJbiJdLCJzb3VyY2VzIjpbImdldC1wYXJhbWV0ZXItc2NoZW1hLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAcHJldHRpZXJcclxuICovXHJcblxyXG5pbXBvcnQgSW0gZnJvbSBcImltbXV0YWJsZVwiXHJcblxyXG5jb25zdCBzd2FnZ2VyMlNjaGVtYUtleXMgPSBJbS5TZXQub2YoXHJcbiAgXCJ0eXBlXCIsXHJcbiAgXCJmb3JtYXRcIixcclxuICBcIml0ZW1zXCIsXHJcbiAgXCJkZWZhdWx0XCIsXHJcbiAgXCJtYXhpbXVtXCIsXHJcbiAgXCJleGNsdXNpdmVNYXhpbXVtXCIsXHJcbiAgXCJtaW5pbXVtXCIsXHJcbiAgXCJleGNsdXNpdmVNaW5pbXVtXCIsXHJcbiAgXCJtYXhMZW5ndGhcIixcclxuICBcIm1pbkxlbmd0aFwiLFxyXG4gIFwicGF0dGVyblwiLFxyXG4gIFwibWF4SXRlbXNcIixcclxuICBcIm1pbkl0ZW1zXCIsXHJcbiAgXCJ1bmlxdWVJdGVtc1wiLFxyXG4gIFwiZW51bVwiLFxyXG4gIFwibXVsdGlwbGVPZlwiXHJcbilcclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQYXJhbWV0ZXJTY2hlbWFEZXNjcmlwdG9yXHJcbiAqIEBwcm9wZXJ0eSB7SW1tdXRhYmxlLk1hcH0gc2NoZW1hIC0gdGhlIHBhcmFtZXRlciBzY2hlbWFcclxuICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gcGFyYW1ldGVyQ29udGVudE1lZGlhVHlwZSAtIHRoZSBlZmZlY3RpdmUgbWVkaWEgdHlwZSwgZm9yIGBjb250ZW50YC1iYXNlZCBPcGVuQVBJIDMuMCBQYXJhbWV0ZXJzLCBvciBgbnVsbGAgb3RoZXJ3aXNlXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgZWZmZWN0aXZlIHNjaGVtYSB2YWx1ZSBmb3IgYSBwYXJhbWV0ZXIsIG9yIGFuIGVtcHR5IEltbXV0YWJsZS5NYXAgaWZcclxuICogbm8gc3VpdGFibGUgc2NoZW1hIGNhbiBiZSBmb3VuZC5cclxuICpcclxuICogU3VwcG9ydHMgT3BlbkFQSSAzLjAgYFBhcmFtZXRlci5jb250ZW50YCBwcmlvcml0eSAtLSBzaW5jZSBhIFBhcmFtZXRlciBPYmplY3RcclxuICogY2Fubm90IGhhdmUgYm90aCBgc2NoZW1hYCBhbmQgYGNvbnRlbnRgLCB0aGlzIGZ1bmN0aW9uIGlnbm9yZXMgYHNjaGVtYWAgd2hlblxyXG4gKiBgY29udGVudGAgaXMgcHJlc2VudC5cclxuICpcclxuICogQHBhcmFtIHtJbW11dGFibGUuTWFwfSBwYXJhbWV0ZXIgVGhlIHBhcmFtZXRlciB0byBpZGVudGlmeSBhIHNjaGVtYSBmb3JcclxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZ1xyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbmZpZy5pc09BUzMgV2hldGhlciB0aGUgcGFyYW1ldGVyIGlzIGZyb20gYW4gT3BlbkFQSSAyLjBcclxuICogb3IgT3BlbkFQSSAzLjAgZGVmaW5pdGlvblxyXG4gKiBAcmV0dXJuIHtQYXJhbWV0ZXJTY2hlbWFEZXNjcmlwdG9yfSBJbmZvcm1hdGlvbiBhYm91dCB0aGUgcGFyYW1ldGVyIHNjaGVtYVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyYW1ldGVyU2NoZW1hKHBhcmFtZXRlciwgeyBpc09BUzMgfSA9IHt9KSB7XHJcbiAgLy8gUmV0dXJuIGVtcHR5IE1hcCBpZiBgcGFyYW1ldGVyYCBpc24ndCBhIE1hcFxyXG4gIGlmICghSW0uTWFwLmlzTWFwKHBhcmFtZXRlcikpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNjaGVtYTogSW0uTWFwKCksXHJcbiAgICAgIHBhcmFtZXRlckNvbnRlbnRNZWRpYVR5cGU6IG51bGwsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoIWlzT0FTMykge1xyXG4gICAgLy8gU3dhZ2dlciAyLjBcclxuICAgIGlmIChwYXJhbWV0ZXIuZ2V0KFwiaW5cIikgPT09IFwiYm9keVwiKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc2NoZW1hOiBwYXJhbWV0ZXIuZ2V0KFwic2NoZW1hXCIsIEltLk1hcCgpKSxcclxuICAgICAgICBwYXJhbWV0ZXJDb250ZW50TWVkaWFUeXBlOiBudWxsLFxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHNjaGVtYTogcGFyYW1ldGVyLmZpbHRlcigodiwgaykgPT4gc3dhZ2dlcjJTY2hlbWFLZXlzLmluY2x1ZGVzKGspKSxcclxuICAgICAgICBwYXJhbWV0ZXJDb250ZW50TWVkaWFUeXBlOiBudWxsLFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBJZiB3ZSd2ZSByZWFjaGVkIGhlcmUsIHRoZSBwYXJhbWV0ZXIgaXMgT3BlbkFQSSAzLjBcclxuXHJcbiAgaWYgKHBhcmFtZXRlci5nZXQoXCJjb250ZW50XCIpKSB7XHJcbiAgICBjb25zdCBwYXJhbWV0ZXJDb250ZW50TWVkaWFUeXBlcyA9IHBhcmFtZXRlclxyXG4gICAgICAuZ2V0KFwiY29udGVudFwiLCBJbS5NYXAoe30pKVxyXG4gICAgICAua2V5U2VxKClcclxuXHJcbiAgICBjb25zdCBwYXJhbWV0ZXJDb250ZW50TWVkaWFUeXBlID0gcGFyYW1ldGVyQ29udGVudE1lZGlhVHlwZXMuZmlyc3QoKVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNjaGVtYTogcGFyYW1ldGVyLmdldEluKFxyXG4gICAgICAgIFtcImNvbnRlbnRcIiwgcGFyYW1ldGVyQ29udGVudE1lZGlhVHlwZSwgXCJzY2hlbWFcIl0sXHJcbiAgICAgICAgSW0uTWFwKClcclxuICAgICAgKSxcclxuICAgICAgcGFyYW1ldGVyQ29udGVudE1lZGlhVHlwZSxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBzY2hlbWE6IHBhcmFtZXRlci5nZXQoXCJzY2hlbWFcIikgPyBwYXJhbWV0ZXIuZ2V0KFwic2NoZW1hXCIsIEltLk1hcCgpKTogSW0uTWFwKCksXHJcbiAgICBwYXJhbWV0ZXJDb250ZW50TWVkaWFUeXBlOiBudWxsLFxyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiJxNUZBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlo7QUFDQTtBQUNBLEdBRUEsTUFBTyxDQUFBRSxFQUFFLEtBQU0sV0FBVyxDQUUxQixLQUFNLENBQUFDLGtCQUFrQixFQUFBSCxhQUFBLEdBQUFJLENBQUEsTUFBR0YsRUFBRSxDQUFDRyxHQUFHLENBQUNDLEVBQUUsQ0FDbEMsTUFBTSxDQUNOLFFBQVEsQ0FDUixPQUFPLENBQ1AsU0FBUyxDQUNULFNBQVMsQ0FDVCxrQkFBa0IsQ0FDbEIsU0FBUyxDQUNULGtCQUFrQixDQUNsQixXQUFXLENBQ1gsV0FBVyxDQUNYLFNBQVMsQ0FDVCxVQUFVLENBQ1YsVUFBVSxDQUNWLGFBQWEsQ0FDYixNQUFNLENBQ04sWUFDRixDQUFDLEVBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUpBLENBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLGNBQWUsU0FBUyxDQUFBQyxrQkFBa0JBLENBQUNDLFNBQVMsQ0FBRSxDQUFFQyxNQUFPLENBQUMsRUFBQVQsYUFBQSxHQUFBVSxDQUFBLFNBQUcsQ0FBQyxDQUFD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